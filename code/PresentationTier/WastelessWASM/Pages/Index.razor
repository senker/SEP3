@page "/"
@using HttpClients.ClientInterfaces
@using Domain.Models
@inject NavigationManager navMgr
@inject ISellerService sellerService; 

<PageTitle>Index</PageTitle>

<div class="introPage" align="center">
    <h1>Wasteless</h1>
    <p>Let's start saving food</p>
</div>
<CustomerHome/>

<div class="restaurants">

    @for (var i = 0; i < _number_of_restaurants; i++)
    {
        var seller = _sellers.ElementAt(i);

        <div class="content">
            <img src="@seller.Image" alt="babunia" class="restaurant_image"/>
            <div class="tags">
                <div class="tag">@seller.Type</div>
            </div>
            <h3>@seller.CompanyName</h3>
            <div classs="images">
                @for (var j = 0; j < seller.Rating; j++)
                {
                    <img src="img/star-fill.svg" alt="star"/>
                }
                @for (var k = 0; k < 5 - seller.Rating; k++)
                {
                    <img src="img/star.svg" alt="star"/>
                }
            </div>
            <button class="read_more" @onclick="() => ReadMore(seller)">Read more</button>

        </div>
    }
</div>

<button class="reservationButton" @onclick="Reservations">Go to your reservations</button>

<style>
    body {
        
        background: #48b1bf; 
        }
</style>
<script suppress-error="BL9992" src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDecST4-GSgcx5pAQbq0h2kbU55wlUfeuY"></script>

@code {


    private string errorLabel;
    private IEnumerable<SellerModel>? _sellers;
    private string msg = "";
    private int? _number_of_restaurants = 0;
    private SellerModel _seller;
    private string _imageURL;


    private void Reservations()
    {
        navMgr.NavigateTo("/CustomerActiveReservation/11");
    }

    private void ReadMore(SellerModel seller)
    {
        errorLabel = "";
        try
        {
            _seller = seller; /*
            _savedRestaurant.SetSeller(_seller);*/
            navMgr.NavigateTo("/seller/" + _seller.Cvr);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            errorLabel = $"Error: {e.Message}";
        }
    // return Task.CompletedTask;
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _sellers = await sellerService.GetSellers();
            _number_of_restaurants = _sellers.Count();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

}