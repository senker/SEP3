@page "/CreatePack"      
@using HttpClients.ClientInterfaces
@using Domain.Models
@using Domain.DTOs
@using System.Security.Claims
@inject IFoodPackService FoodPackService;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager navMgr


<PageTitle>Create food pack</PageTitle>
<AuthorizeView>
    <Authorized>

    @if (context.User.IsInRole("seller"))
    {
        <h3 style="text-align: center">Create food pack</h3>

        <div class="foodPackForm">

            <div class="field">
                <label style="text-align: center">Title:</label>
                <input id="titlePack" type="text" @bind="_title"/>
            </div>

            <div class="field">
                <label style="text-align: center">Description:</label>
                <textarea id="textDescription" @bind="_packDescription"></textarea>
            </div>

            <div>
                <label>Pickup start time:</label>
                <input type="datetime-local" @bind="startDate" @bind:event="oninput" class="form-control valid"/>
            </div>
            <div>
                <label>Pickup end time:</label>
                <input type="datetime-local" @bind="endDate" @bind:event="oninput" class="form-control valid"/>
            </div>

            <div id="packTypeRadio">
                <label style="text-align: center">Choose food type:</label>
                <div class="form-check">
                    <input class="form-check-input" type="radio" name="typeRadio" id="typeVegan" value="vegan" onchange="@OnSelectType">
                    <label class="form-check-label" for="typeVegan">Vegan</label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="radio" name="typeRadio" id="typeMeat" value="meat" onchange="@OnSelectType">
                    <label class="form-check-label" for="typeMeat">Meat</label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="radio" name="typeRadio" id="typePastry" value="pastry" onchange="@OnSelectType">
                    <label class="form-check-label" for="typePastry">Pastry</label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="radio" name="typeRadio" id="typeGrocery" value="grocery" onchange="@OnSelectType">
                    <label class="form-check-label" for="typeGrocery" >Grocery</label>
                </div>
            </div>
            <div id="packIsReady">
                <label style="text-align: center">Is the product prepared?</label>
                <div class="form-check">
                    <input class="form-check-input" type="radio" name="typeReady" id="typeIsReady" value="true" onchange="@OnSelectPrepared">
                    <label class="form-check-label" for="typeIsReady">Yes</label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="radio" name="typeReady" id="typeIsNotReady" value="false" onchange="@OnSelectPrepared">
                    <label class="form-check-label" for="typeIsNotReady">No</label>
                </div>
            </div>
            <div class="field">
                <label>Price:</label>
                <input id="price" type="number" @bind="_price"/>
            </div>
            <div class="button">
                <button class="creatPackBtn" @onclick="CreateFoodPack">Create</button>
            </div>
        </div>
            }
    @if (context.User.IsInRole("customer"))
    {
        <h3>You are not authorized!</h3>

    }
    </Authorized>
</AuthorizeView>

@code {
    private string _title = "";
    private string _packDescription = "";
    private string _type = "";
    private bool _isPrepared;
    private double _price;
    private string? _errorLabel;
    private string _cvr;
    
    private DateTime startDate = DateTime.Today;
    private DateTime endDate = DateTime.Today;
    
    
    private void OnSelectType(ChangeEventArgs args) => _type = (string)args.Value!;
    private void OnSelectPrepared(ChangeEventArgs args) => Boolean.TryParse((string)args.Value!, out _isPrepared);

    private async void CreateFoodPack()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        _cvr = authState.User.FindFirst(c => c.Type == ClaimTypes.Sid)?.Value!;

        var foodPackModel = new FoodPackCreateModel
        {
            Title = _title,
            Description = _packDescription,
            Type = _type,
            IsPrepared = _isPrepared,
            Price = _price,
            StartTime = startDate,
            EndTime = endDate,
            Cvr = Convert.ToInt32(_cvr)
        };
        var foodPackDto = new FoodPackCreateDto(foodPackModel);
        FoodPackService.PostFoodPack(foodPackDto);
        navMgr.NavigateTo("/");
    }

}