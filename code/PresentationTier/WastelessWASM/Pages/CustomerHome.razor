@page "/CustomerHome"
@using HttpClients.ClientInterfaces
@using Domain.Models
@using System.Text.RegularExpressions
@using Domain.DTOs
@inject NavigationManager navMgr
@inject ISellerService sellerService; 
@inject IFoodPackService packMan;
<div id="searchForm">
    <div id="textPair">
       
        <div class="field">
            <label>Keyword</label>
            <input id="titleSearch" type="text" @bind="titleSearch"/>
        </div>

        <div class="field">
            <label>PostCode</label>
            <input id="postCodeSearch" type="text" @bind="postCode"/>
        </div>
        <div class="field">
            <label>Max price</label>
            <input id="maxPrice" type="text" @bind="maxPrice"/>
        </div>
    </div>
    <div id="packTypeRadio" >
        <label style="text-align: center">Chose food type:</label>
        <div class="form-check">
                
            <input class="form-check-input" type="radio" name="typeRadio" value="Vegan" id="typeVegan" checked="checked" @onchange="@((e) => { typeChoice = e.Value.ToString(); })">
            <label class="form-check-label" for="typeVegan">Vegan</label>

        </div>
        <div class="form-check">
            <input class="form-check-input" type="radio" value="Meat" name="typeRadio" id="typeMeat" @onchange="@((e) => { typeChoice = e.Value.ToString(); })">
            <label class="form-check-label" for="typeMeat">
                Meat
            </label>
        </div>
        <div class="form-check">
            <input class="form-check-input" type="radio" value="Pastry" name="typeRadio" id="typePastry" @onchange="@((e) => { typeChoice = e.Value.ToString(); })">
            <label class="form-check-label" for="typePastry" >
                Pastry
            </label>
        </div>
        <div class="form-check"><input class="form-check-input" type="radio" value="Grocery" name="typeRadio" id="typeGrocery" @onchange="@((e) => { typeChoice = e.Value.ToString();})">
            <label class="form-check-label" for="typeGrocery">Grocery</label>
        </div>
                
    </div>
   
    <div id="packIsReady">
        <label style="text-align: center">Ready to eat?</label>
        <div class="form-check">
                    
            <input class="form-check-input" type="radio" name="typeReady" id="typeIsReady" checked="checked" @onchange="ready">
            <label class="form-check-label" for="typeVegan">Yes</label>
    
        </div>
        <div class="form-check">
            <input class="form-check-input" type="radio" name="typeReady" id="typeIsNotReady" @onchange="notReady">
            <label class="form-check-label" for="typeMeat">No</label>
        </div>
    </div>
    
    
    <div><button id="searchBtn" @onclick="searchBtn">Search</button>
    </div>
</div>

<div class="foodItem">
    @for (var i = 0; i < packManModels.Count; i++)
    {
        var pack = packManModels.ElementAt(i);
        <div class="row item">
            <div class="col-md-4 item_photo">
                <img class="foodIcon" src="img/foodpack.jpg"/>
            </div>
            <div class="col-md-6 item_description">
                <div class="row">
                    <div class="col-lg-12" style="text-align: center">
                        <h2>Title: @pack.Title</h2>
                    </div>
                </div>
                <div class="row item" style="border-bottom:none">
                    <div class="col-lg-12">
                        <div class="row item" style="border-bottom:none">
                            <div class="col-lg-6">
                                <p>Type: @pack.Type</p>
                                <p>Prepared: @pack.IsPrepared</p>
                            </div>
                            @if (pack.Id != null)
                            {
                                selectedFoodPackId = pack.Id;
                            }
                            <div class="col-lg-6">
                                <p>Description</p>
                                <p>@pack.Description</p>
                            </div>
                        </div>

                    </div>
                </div>
            </div>
            <div class="col-md-2 item_add">
                <p style="float:left; align-items:  center">@pack.Price DKK</p>
                <button class="add_btn" style="float:right" onclick="@ReserveItem">
                    <img src="img/basket.svg" alt="basket"/>
                    <p>Reserve</p>
                </button>
            </div>
        </div>
    }
</div>

@code {
    
    private string titleSearch;
    private int postCode;
    private int maxPrice;
    private string errorLabel;
    private IEnumerable<SellerModel>? _sellers;
    private string msg = "";
    private int? _number_of_restaurants=0;
    private SellerModel _seller = null;
    private string _imageURL;
    private string veganChoice;
    private string meatChoice;
    private string pastryChoice;
    private string groceryChoice;
    private bool readyChoice = true;
    private string typeChoice;
    List<FoodPackModel> packManModels;
    
    

   
    private void searchBtn()
    {
        SearchFoodPackDto searchPack = new SearchFoodPackDto
        {
            IsPrepared = readyChoice,
            Title = titleSearch,
            Type = typeChoice,
            Price = maxPrice,
            PostCode = postCode


        };
         packManModels = packMan.SearchFoodPacks(searchPack);


    }
    private void ready(ChangeEventArgs args)
    {
        String red; 
        red=args.Value.ToString();
        if (red.ToLower() == "yes") readyChoice = false;
        else readyChoice = true;

    }
    private void notReady (ChangeEventArgs args)
    {
        String notRed; notRed=args.Value.ToString();
        if (notRed.ToLower() == "no") readyChoice = true;
        else readyChoice = false;
    }
    

    

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    /*private void  ReadMore(SellerModel seller)
    {

        errorLabel = "";
        try
        {
            navMgr.NavigateTo("/Restaurant");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            errorLabel = $"Error: {e.Message}";
        }
    // return Task.CompletedTask;
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _sellers = await sellerService.GetSellers();
            _number_of_restaurants = _sellers.Count();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }*/

}