@page "/RegisterInto"
@using HttpClients.ClientInterfaces
@using Domain.Models
@using Domain.DTOs
@using System.Reflection.Metadata
@using Microsoft.AspNetCore.Http
@using System.Net.Mime
@using System.ComponentModel
@inject ISellerService SellerService;
@inject ICustomerService CustomerService;
@inject NavigationManager navMgr;
@inject IJSRuntime JSRuntime  
@inject SavedRestaurant _savedRestaurant;       


<AuthorizeView>
<NotAuthorized>
<PageTitle>Register</PageTitle>      

<head>   
    <title>Register</title>
    <script suppress-error="BL9992" src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.1/jquery.min.js"></script>
</head>
<style>
    body {background: #48b1bf; }
</style>
    @if (_userFormType == null) {
        <div class="card">
            <h3 style="text-align: center">Register</h3>
            <div class="field">
                <label>First Name:</label>
                <input type="text" @bind="_firstName" @bind:event="oninput"/>
            </div>
            <div class="field">
                <label>Last Name:</label>
                <input type="text" @bind="_lastName" @bind:event="oninput"/>
            </div>

            <div class="field">
                <label>Email:</label>
                <input type="text" @bind="_email" @bind:event="oninput"/>
            </div>   
            <div class="field">
                <label>Password:</label>
                <input type="text" @bind="_password" @bind:event="oninput"/>
            </div>
            <div class="field">
                <label>City:</label>
                <input type="text" @bind="_city" @bind:event="oninput"/>
            </div>
            <div class="field">
                <label>Street name:</label>
                <input type="text" @bind="_streetName" @bind:event="oninput"/>
            </div>
            <div class="field">
                <label>Post code:</label>
                <input type="text" @bind="_postcode" @bind:event="oninput"/>
            </div>
            <div class="field">
                <label>Phone number:</label>
                <input type="text" @bind="_phoneNumber" @bind:event="oninput"/>
            </div>
            <h4 style="text-align: center">Chose user type</h4>
            <div class="buttonRow">
                <div class="form-check form-check-inline">
                    <input class="form-check-input" type="radio" name="user" id="customer" value="customer" onchange="@OnSelect"/>
                    <label class="form-check-label" for="customer">Customer</label>
                </div>
                <div class="form-check form-check-inline">
                    <input class="form-check-input" type="radio" name="user" id="seller" value="seller" onchange="@OnSelect"/>
                    <label class="form-check-label" for="seller">Seller</label>
                </div>
            </div>
            <div class="field">
                <button class="registerIntoBtn" @onclick="NextStep">Next</button>
            </div>
        </div>
    }
</NotAuthorized>
</AuthorizeView>
         @if (_userFormType is "seller")
         {
             <AuthorizeView>
                 <NotAuthorized>
                     <div class="card">
                     <h3 style="text-align: center">Seller</h3>
                     <div class="field">
                                     <label>Cvr:</label>
                                     <input type="text" @bind="_cvr" @bind:event="oninput"/>
                                 </div>
                                 <div class="field">
                                     <label>Company name:</label>
                                     <input type="text" @bind="_companyName" @bind:event="oninput"/>
                                 </div>
                                 <div class="field">
                                     <label>Description:</label>
                                     <input type="text" @bind="_description" @bind:event="oninput"/>
                                 </div>
                                 <div class="field">
                                     <label>Type of restaurant:</label>
                                     <input type="text" @bind="_type" @bind:event="oninput"/>
                                 </div>
                                 <div class="field">
                                     <label>Website:</label>
                                     <input type="text" @bind="_website" @bind:event="oninput"/>
                                 </div>
                                 <div class="field">
                                     <label>Rating:</label>
                                     <input type="text" @bind="_rating" @bind:event="oninput"/>
                                 </div> 
                     <form   id="form" enctype="multipart/form-data" onsubmit="AJAXSubmit(this); return false;" >
                     <label asp-for="FileUpload.FormFile">Choose photo</label>
                                                      
                                                              <!-- id="FileUpload.FormFile" , name="FileUpload.FormFile" -->
                                                              <input asp-for="FileUpload.FormFile" type="file" id="fileInput" accept="image/png, image/jpg, image/jpeg" name="file">      
                                                              <button class="saveImage" type="submit">Save image</button>
                                                              <div class="field">
                             <button class="registerbtn" @onclick="CreateSeller">Register</button>
                         </div> 
                                                              <label id="labelId" runat="server">Title</label>
                     </form>
                     </div>                                                                                                  
                     
                     
                    
                 </NotAuthorized>
             </AuthorizeView>
         }
         
        @if (_userFormType is "customer")
        {
            <AuthorizeView>
    
                <NotAuthorized>
        
                    <div class="card">
                        <h3 style="text-align: center">Customer</h3>
                        <div class="field">
                            <label>Preferences:</label>
                            <input type="text" @bind="tempPref" @bind:event="oninput"/>
                        </div>
                        <div class="field">
                            <button class="registerbtn" @onclick="CreateCustomer">Register</button>
                        </div>    

                    </div>
                </NotAuthorized>
            </AuthorizeView>
        }
@code {
    //User creation fields
     private string? _firstName;
     private string? _lastName;
     private string? _email;
     private string? _password;
     private string? _city;
     private string? _streetName;
     private string? _postcode;
     private string? _phoneNumber;
    private string? _role;

    //Seller creation fields
    
    private string _cvr;
    private string? _companyName;
    private string? _description;
    private string? _type;
    private string? _website;
    private string _rating;

    // Customer creation field
    private string tempPref;
    private List<string> _preferences;
    
    
    private string? _userFormType;

    private string? _value;
    private string _resultMsg = "";
    private string _color = "";
    private static string _image ="image";
    private static string _imageInput;


    private IFormFile formFile;



    [JSInvokable]
    public static async Task<string> ReturnString(string imageFromJS)
    {
        _imageInput = imageFromJS;
        RegisterInto registerInto = new RegisterInto();
        await registerInto.CreateSeller();

        return null;
    }
   


    private void OnSelect(ChangeEventArgs args) => _value = (string)args.Value!;
    

     private void NextStep()
     {
         _userFormType = _value;
     }

     private async Task CreateSeller()
     {
         _role = _userFormType;
         Console.WriteLine("Creating seller in RegisterInto");
        _resultMsg = "";
        var addressModel = new AddressModel(_city, _streetName, Convert.ToInt32(_postcode));
        var userModel =
        new UserCreateModel(_firstName, _lastName, addressModel, Convert.ToInt32(_phoneNumber), _email, _password, _role);
                    
        try
        {
            await SellerService.CreateSeller(new SellerCreateDto(
            new SellerCreateModel(
                userModel,
                Convert.ToInt32(_cvr),
                _companyName!,
                _description!,
                _type!,
                _website!,
                Convert.ToSingle(_rating), 
                "")
            ));
            _resultMsg = "User successfully created";
            _color = "green";
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
                _resultMsg = e.Message;
                _color = "red";
            }
     }
    
    private async Task CreateCustomer()
    {
        _role = _userFormType;
        _resultMsg = "";
        var addressModel = new AddressModel(_city, _streetName, Convert.ToInt32(_postcode));
        var userModel =
            new UserCreateModel(_firstName, _lastName, addressModel, Convert.ToInt32(_phoneNumber), _email, _password, _role);
        _preferences = new List<string> { tempPref };
        try
        {
            await CustomerService.CreateCustomer(new CustomerCreateDto(
                new CustomerCreateModel(
                    userModel,
                    _preferences )
                ));
                     
            _resultMsg = "User successfully created";
            _color = "green";
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            _resultMsg = e.Message;
            _color = "red";
        }
    }


}      

 <script suppress-error="BL9992" type="text/javascript">
                        async function AJAXSubmit(oFormElement)
                        {
                             const userFile = document.getElementById('fileInput').files[0];
                 
                            const formData = new FormData();
                            formData.append('user-file', userFile);
                           
                              const reader = new FileReader();
                              reader.readAsDataURL(userFile);
                              var urlResult;
                              reader.onloadend=() =>{
                                  console.log("onloadend");
                                       console.log(reader.result);
                                       window.localStorage.setItem("resultURL", reader.result); 
                                       urlResult = reader.result;
                                  };
                             //  window.localStorage.setItem("resultURL", reader.result); 
                          
                            
                 
                             
                           //  console.log("url from localstorage");
                         //    console.log(JSON.stringify(window.localStorage.getItem("resultURL")));

                                // DotNet.invokeMethodAsync('WastelessWASM', 'ReturnString', JSON.stringify(window.localStorage.getItem("resultURL")));
      
                               
                                await $.ajax({
                                   type: "POST",
                                   url: "https://localhost:7133/image",
                                   data: JSON.stringify(window.localStorage.getItem("resultURL")),
                                   headers: {
                                        'Content-Type': 'application/json'   
                                    },
                                   success: function (){
                                       console.log("ajax success!");
                                   },
                                   error: function (error){
                                        alert(error);    
                                   }
                                });
      
                               
                                 
                              }  
                          
                        
                    </script>



 
@*<div class="field">
                 <label style="text-align: center">Password:</label>
                 <input type="password" @bind="password"/>
             </div>
             <div class="field">
                                 <label style="text-align: center">Repeat password:</label>
                                 <input type="password" @bind="repeatedPassword"/>
                             </div>
                         @if (!string.IsNullOrEmpty(errorLabel))
                         {
                             <div class="field">
                                 <label style="color: red">
                                     @errorLabel
                                 </label>
                             </div>
                         }*@

@*/*
     private string? password;
     private string? repeatedPassword;
     private string? errorLabel;*/*@

@*private async Task RegisterAsync()
{
/*errorLabel = "";
try
{
if (!repeatedPassword.Equals(password))
{
throw new Exception("Passwords are not matching");
}
             
}
catch (Exception e)
{
errorLabel = e.Message;
}*/
}*@